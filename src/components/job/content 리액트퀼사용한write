import styled from "styled-components";
import React, { useEffect, useState, useRef } from "react";
// import "./css/combbswrite.css";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import ReactQuill, { Quill } from "react-quill";
// import "react-quill/dist/quill.snow.css";
import { htmlToText } from "html-to-text";
// import "bootstrap/dist/css/bootstrap.min.css";
import BootRadio from "./Radio";
import findmap from "../../assets/job/find.png";
import Select from "react-select";
import Buttons from "./Buttons";
import Editor2 from "./reactquill";

const ComBbswrite = () => {
    let history = useNavigate();
    let params = useParams(); // seq값 받아오기
    let seq = params.seq;
    // console.log(seq);

    /*
    ---------------리액트퀼 안에 이미지 넣는 기능 start --------------------
      안에 이미지를 넣을 때마다 실행되는 Handler
   */
    const imageHandler = () => {
        // file input 임의 생성
        const input = document.createElement("input");
        input.setAttribute("type", "file");
        input.click();

        console.log(1);

        input.onchange = async () => {
            console.log(2);
            const file = input.files;

            const formData = new FormData();

            if (file) {
                console.log(3);
                formData.append("multipartFiles", file[0]);
            }

            // file 데이터 담아서 서버에 전달하여 이미지 업로드
            // const res = await axios.post('http://localhost/job/uploadImage', {"multipartFiles": file});

            const res = await axios({
                method: "post",
                url: "http://localhost:/job/uploadImage", // => url 맞는거로 바꾸기
                data: formData,
                headers: {
                    "Content-Type": "multipart/form-data",
                },
            });
            console.log(res.data);

            if (quillRef.current) {
                // 현재 Editor 커서 위치에 서버로부터 전달받은 이미지 불러오는 url을 이용하여 이미지 태그 추가
                const index = quillRef.current.getEditor().getSelection().index;

                const quillEditor = quillRef.current.getEditor();
                quillEditor.setSelection(index, 1);

                quillEditor.clipboard.dangerouslyPasteHTML(
                    index,
                    `<img src=${res.data} alt=${"alt text"} />`
                );
            }
        };
    };

    // useMemo를 사용하지 않고 handler를 등록할 경우 타이핑 할때마다 focus가 벗어남
    const modules = React.useMemo(
        () => ({
            toolbar: {
                // container에 등록되는 순서대로 tool 배치
                container: [
                    [{ font: [] }], // font 설정
                    [{ header: [1, 2, 3, 4, 5, 6, false] }], // header 설정
                    [
                        "bold",
                        "italic",
                        "underline",
                        "strike",
                        "blockquote",
                        "code-block",
                        "formula",
                    ], // 굵기, 기울기, 밑줄 등 부가 tool 설정
                    [
                        { list: "ordered" },
                        { list: "bullet" },
                        { indent: "-1" },
                        { indent: "+1" },
                    ], // 리스트, 인덴트 설정
                    ["link", "image"], // 링크, 이미지, 비디오 업로드 설정
                    [{ align: [] }, { color: [] }, { background: [] }], // 정렬, 글씨 색깔, 글씨 배경색 설정
                    ["clean"], // toolbar 설정 초기화 설정
                ],

                // custom 핸들러 설정
                handlers: {
                    image: imageHandler, // 이미지 tool 사용에 대한 핸들러 설정
                },
            },
        }),
        []
    );
    // --------------- 리액트퀼 안에 이미지 넣는 기능 end ------------------

    // 리액트퀼 toolbar에 사용되는 tool format
    const formats = [
        "font",
        "header",
        "bold",
        "italic",
        "underline",
        "strike",
        "blockquote",
        "code-block",
        "formula",
        "list",
        "bullet",
        "indent",
        "link",
        "image",
        "video",
        "align",
        "color",
        "background",
    ];

    const [htmlStr, setHtmlStr] = useState("");
    // const quillRef = React.useRef<ReactQuill>(null);
    const quillRef = useRef(null);
    // 이미지 업로드 핸들러, modules 설정보다 위에 있어야 정상 적용
    const [id, setId] = useState(window.localStorage.getItem("userId") || ""); // 기본값으로 로그인 여부 확인
    //const [id, setId] = useState(''); // 로그인 기능 merge후 setComid 넣을 수 있음.
    const [title, setTitle] = useState("");
    const [comname, setComname] = useState(""); // 회사이름
    const [comcate, setComcate] = useState(""); //직군
    const [comjobname, setComjobname] = useState(""); //직무
    const [comcareer, setComcareer] = useState(""); //경력
    const [comlocation, setComlocation] = useState(""); //지역
    const [comskill, setComskill] = useState(""); //기술
    const [comtag, setComtag] = useState(""); //태그
    const [startline, setStartline] = useState(""); //시작일
    const [deadline, setDeadline] = useState(""); //마감일
    const [commapx, setCommapx] = useState(""); //위도
    const [commapy, setCommapy] = useState(""); //경도
    const [content, setContent] = useState(""); //내용
    const [comimage, setComimage] = useState(""); //이미지
    const [selectedFile, setSelectedFile] = useState(null); //이력서파일

    //    const [comcatelist, setComcatelist] = useState([]);   직군 삭제 예정
    const [comjobnamelist, setComjobnamelist] = useState([]);
    const [comcareerlist, setComcareerlist] = useState([]);
    const [comlocationlist, setComlocationlist] = useState([]);
    const [comsklist, setComSklist] = useState([]);
    const [comtaglist, setComtaglist] = useState(""); //태그
    const [jobInfo, setJobInfo] = useState([]);
    const [imageUrl, setImageUrl] = useState("");
    const [jobList, setJobList] = useState([]); // 리스트 담기
    // const [jobInfo, setJobInfo] = useState({});

    const postJobInfo = async (id) => {
        const result = await axios.get(`http://localhost/job/${id}`);

        setJobInfo(result.data);
        console.log("가져온 데이터");
        console.log(result.data);
        console.log(result.data.comimage); //이미지 주소 넣기
        setImageUrl(result.data.comimage);
    };

    const JobListData = async (seq) => {
        await axios
            .get("http://localhost/job/view", { params: { seq: seq } })
            .then(function (resp) {
                console.log(resp.data);
                setJobList(resp.data);
                setContent(resp.data.content);
            })
            .catch(function (err) {
                console.log(err);
            });
    };
    //select 선택시 값 변경
    // const updateJobInfo = (key, value) => {
    //     const preJobInfo = { ...jobInfo };

    //     switch (key) {
    //         case "jobName": {
    //             preJobInfo.comjobname = value;
    //         }
    //     }
    //     console.log(preJobInfo);
    //     setJobInfo(preJobInfo);
    // };
    const updateJobInfo = (key, value) => {
        const preJobInfo = { ...jobInfo };

        switch (key) {
            case "jobName": {
                preJobInfo.comjobname = value;
                break;
            }
            // case "career": {
            //     preJobInfo.comcareer = value;
            //     break;
            // }
            // 다른 케이스들...
        }
        console.log(preJobInfo);
        setJobInfo(preJobInfo);
    };

    //radio를 위한 배열
    const skillOptions = [
        { id: 1, label: "Java", value: "Java" },
        { id: 2, label: "Python", value: "Python" },
        { id: 3, label: "JavaScript", value: "JavaScript" },
        { id: 4, label: "React", value: "React" },
        { id: 5, label: "Vue", value: "Vue" },
    ];

    const tagOptions = [
        { id: 1, label: "재택 근무", value: "재택 근무" },
        { id: 2, label: "유연 근무제", value: "유연 근무제" },
        { id: 3, label: "점심 제공", value: "점심 제공" },
        { id: 4, label: "시차 출근제", value: "시차 출근제" },
        { id: 5, label: "인센티브", value: "인센티브" },
        { id: 6, label: "교육", value: "교육" },
        { id: 7, label: "노트북 지원", value: "노트북 지원" },
    ];

    //대표사진 첨부 start : onSubmit ---------------------------------------
    const onSubmit = (e) => {
        e.preventDefault();

        let formData = new FormData();

        formData.append("multipartFiles", document.frm.uploadFile.files[0]);
        console.log(document.frm.uploadFile.files[0]);
        axios({
            method: "post",
            url: "http://localhost:80/uploadImageTest",
            data: formData,
            headers: { "Content-Type": "multipart/form-data" },
        })
            .then((res) => {
                console.log(res.data);
                setComimage(res.data);
                alert("대표이미지가 등록되었습니다.");
            })
            .catch(function (error) {
                alert("file upload fail");
            });
    };
    // 대표사진 첨부 end

    //이력서 파일 첨부 start
    const [comfile, setComfile] = useState(""); //이미지
    const onSubmit2 = (e) => {
        e.preventDefault();

        let formData = new FormData();

        formData.append("multipartFiles", document.frm2.uploadFile.files[0]);
        console.log(document.frm2.uploadFile.files[0]);
        axios({
            method: "post",
            url: "http://localhost:80/uploadFile",
            data: formData,
            headers: { "Content-Type": "multipart/form-data" },
        })
            .then((res) => {
                console.log(res.data);
                setComfile(res.data);
                alert("이력서가 등록되었습니다.");
            })
            .catch(function (error) {
                alert("file upload fail");
            });
    };

    //이력서 파일 첨부 end

    // 알람 start ----------------------------------------------------------------------
    const ComBbswrite = () => {
        // if(comname === undefined || comname.trim() === ''){
        //   alert('회사이름을 입력해 주십시오');
        //   return;
        // }
        // if(comjobname === undefined || comjobname.trim() === ''){
        //   alert('직무 이름을 입력해 주십시오');
        //   return;
        // }
        // if(comskill === undefined || comskill.trim() === ''){
        //   alert('기술 스택을 입력해 주십시오');
        //   return;
        // }
        // if(comcareer === undefined || comcareer.trim() === ''){
        //   alert('경력을 입력해 주십시오');
        //   return;
        // }
        // if(commapx === undefined || commapx.trim() === ''){
        //   alert('위도를 입력해 주십시오');
        //   return;
        // }
        // if(commapy === undefined || commapy.trim() === ''){
        //   alert('경도를 입력해 주십시오');
        //   return;
        // }

        // 알람 end

        axios
            .post("http://localhost:80/writeJob", null, {
                params: {
                    id: id,
                    title: title,
                    comname: comname,
                    comcate: comcate,
                    comjobname: comjobname,
                    comcareer: comcareer,
                    comlocation: comlocation,
                    comskill: comskill,
                    comtag: comtag,
                    startline: startline,
                    deadline: deadline,
                    commapx: commapx,
                    commapy: commapy,
                    content: content,
                    comimage: comimage,
                    whoLiked: "",
                },
            })
            .then((res) => {
                console.log(res.data);
                if (res.data === "YES") {
                    alert("성공적으로 등록되었습니다");
                    history("/combbslist");
                } else {
                    alert("등록되지 않았습니다");
                }
            })
            .catch(function (err) {
                alert(err);
            });
    };

    function handleComcateChange(e) {
        setComcate(e.target.value);
        setComjobname(""); // 1차 셀렉트가 변경될 때마다 2차 셀렉트 초기화
    }
    // 로그인 기능 구현시 주석 풀기!
    //  useEffect(function(){
    //      let login = JSON.parse(localStorage.getItem("login"));
    //      setId(login.id);
    //  }, []);

    // //직군
    // const getComCate = () => {
    //     axios
    //         .get("http://localhost:/job/code/list", {
    //             params: {
    //                 group_seq: 1,
    //                 parent_code_seq: comcate,
    //             },
    //         })
    //         .then((response) => {
    //             setComcatelist(response.data.list.list);
    //         })
    //         .catch((error) => {
    //             console.error(error);
    //         });
    // };
    //직무
    const getComjobname = (value) => {
        setComcate(value);
        axios
            .get("http://localhost:/job/code/list", {
                params: {
                    group_seq: 1,
                    parent_code_seq: null,
                },
            })
            .then((response) => {
                console.log("직무:jobname");
                console.log(response);
                setComjobnamelist(response.data.list.list);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    //경력
    const getComCareer = () => {
        axios
            .get("http://localhost:/job/code/list", {
                params: {
                    group_seq: 2,
                },
            })
            .then((response) => {
                console.log("경력:comcarrer");
                console.log(response);
                setComcareerlist(response.data.list.list);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    //지역
    const getComLocation = () => {
        axios
            .get("http://localhost:80/job/code/list?group_seq=3")
            .then((response) => {
                console.log("지역:comlocation");
                console.log(response);
                setComlocationlist(response.data.list.list);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    //기술
    const skillButtonClick = (value) => {
        setComskill(value);
    };

    const getComSkill = () => {
        axios
            .get("http://localhost:80/job/code/list?group_seq=4")
            .then((response) => {
                console.log(response);
                //   setComSklist(response.data?.list?.list);
                setComSklist(response.data.list.list);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    //태그
    const tagButtonClick = (value) => {
        setComskill(value);
    };

    const getComTag = () => {
        axios
            .get("http://localhost:80/job/code/list?group_seq=5")
            .then((response) => {
                console.log("복지 태그 : comtag");
                console.log(response);
                setComtaglist(response.data.list.list);
            })
            .catch((error) => {
                console.error(error);
            });
    };

    useEffect(() => {
        getComjobname(); //직무
        getComCareer(); //경력
        getComLocation(); //지역
        getComSkill(); //기술
        getComTag(); //태그
        postJobInfo(seq);
        JobListData(seq);
    }, []);

    return (
        <div>
            <h3>글쓰기</h3>

            <table align="center" border="1">
                <colgroup>
                    <col width="100px" />
                    <col width="1000px" />
                </colgroup>
                <tbody>
                    <tr>
                        <th>제목</th>
                        <td>
                            <input
                                type="text"
                                value={jobInfo.title ? jobInfo.title : ""}
                                size="30"
                                onChange={(e) => setTitle(e.target.value)}
                                placeholder="제목"
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>회사</th>
                        <td>
                            <input
                                type="text"
                                value={jobInfo.comname ? jobInfo.comname : ""}
                                size="30"
                                onChange={(e) => setComname(e.target.value)}
                                placeholder="회사 이름"
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>직무</th>
                        <td>
                            <Select
                                value={
                                    jobInfo.comjobname
                                        ? jobInfo.comjobname
                                        : null
                                }
                                options={comjobnamelist}
                                placeholder="직무"
                                onChange={(e) => updateJobInfo("jobName", e)}
                                styles={{
                                    control: (base) => ({
                                        ...base,
                                        width: "260px",
                                    }),
                                }}
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>경력</th>
                        <td>
                            <Select
                                value={
                                    jobInfo.comcareer ? jobInfo.comcareer : null
                                }
                                options={comcareerlist}
                                placeholder="경력"
                                onChange={(e) => setComcareer("career", e)}
                                styles={{
                                    control: (base) => ({
                                        ...base,
                                        width: "260px",
                                    }),
                                }}
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>지역</th>
                        <td>
                            <Select
                                options={comlocationlist}
                                placeholder="지역"
                                onChange={(e) => setComlocation(e.label)}
                                styles={{
                                    control: (base) => ({
                                        ...base,
                                        width: "260px",
                                    }),
                                }}
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>기술</th>
                        <td>
                            <BootRadio
                                options={skillOptions}
                                type="radio"
                                inline
                                onChange={(e) => setComskill(e.target.value)}
                                checked={
                                    jobInfo.comskill === skillOptions.value
                                }
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>태그</th>
                        <td>
                            <BootRadio
                                options={tagOptions}
                                type="radio"
                                inline
                                onChange={(e) => setComtag(e.target.value)}
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>시작일</th>
                        <td>
                            <input
                                type="date"
                                value={
                                    jobInfo.startline ? jobInfo.startline : ""
                                }
                                size="30"
                                onChange={(e) => setStartline(e.target.value)}
                                placeholder="채용 시작 날짜"
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>마감일</th>
                        <td>
                            <input
                                type="date"
                                value={jobInfo.deadline ? jobInfo.deadline : ""}
                                size="30"
                                onChange={(e) => setDeadline(e.target.value)}
                                placeholder="채용 마감 날짜"
                            />
                        </td>
                    </tr>
                    <tr>
                        <th>
                            <img
                                src={findmap}
                                alt="findjob"
                                className="findmap"
                            />
                        </th>
                        <td>
                            <a href="http://map.esran.com/" target="_blank">
                                버튼을 눌러서 위도와 경도를 찾아보세요!
                            </a>
                        </td>
                    </tr>
                    <tr>
                        <th>위도</th>

                        <td>
                            <input
                                type="text"
                                value={jobInfo.commapx ? jobInfo.commapx : ""}
                                size="30"
                                onChange={(e) => setCommapx(e.target.value)}
                                placeholder="위도 입력"
                            />
                        </td>
                    </tr>

                    <tr>
                        <th>경도</th>
                        <td>
                            <input
                                type="text"
                                value={jobInfo.commapy ? jobInfo.commapy : ""}
                                size="30"
                                onChange={(e) => setCommapy(e.target.value)}
                                placeholder="경도 입력"
                            />
                        </td>
                    </tr>

                    <tr>
                        <th> 미리보기</th>
                        <td>
                            {jobInfo.length > 0 &&
                                jobInfo.map((item) => (
                                    <div className="item" key={item.seq}>
                                        <div className="img">
                                            <img
                                                src={item.comimage}
                                                alt="이미지"
                                                style={{
                                                    width: "210px",
                                                    height: "130px",
                                                }}
                                            />
                                            <p>{imageUrl}</p>
                                        </div>
                                    </div>
                                ))}
                        </td>
                    </tr>

                    <tr>
                        <th>대표사진</th>
                        <td>
                            <form
                                name="frm"
                                onSubmit={onSubmit}
                                encType="multipart/form-data"
                            >
                                <input
                                    type="file"
                                    name="uploadFile"
                                    accept="*"
                                    defaultValue={imageUrl}
                                />
                                <input type="submit" value="등록" />
                            </form>
                        </td>
                    </tr>

                    <tr>
                        <th>이력서</th>
                        <td>
                            <form
                                name="frm2"
                                onSubmit={onSubmit2}
                                encType="multipart/form-data"
                            >
                                <input
                                    type="file"
                                    name="uploadFile"
                                    accept="*"
                                />
                                <input type="submit" value="등록" />
                            </form>
                        </td>
                    </tr>

                    {/* <tr>
                        <th>내용</th>
                        <td>
                            <CustomReactQuill
                                
                                ref={quillRef}
                                theme="snow"
                                modules={modules}
                                formats={formats}
                                value={htmlStr}
                              
                                placeholder="내용을 입력하세요."
                                onChange={(content, delta, source, editor) => {
                                    setHtmlStr(editor.getHTML());
                                }}
                            />
                        </td>
                    </tr> */}

                    <tr>
                        <th>내용</th>
                        <td colSpan={3}>
                            {/* 리액트퀼  content*/}
                            <Editor2
                                value={content}
                                onChange={(value) => setContent(value)}
                            />{" "}
                            {/*ref={editorRef} */}
                        </td>
                    </tr>

                    <tr>
                        <td colSpan="2">
                            <button
                                type="button"
                                onClick={() => ComBbswrite()}
                                className="btn btn-primary"
                            >
                                글작성 완료
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    );
};

// style
const CustomReactQuill = styled(ReactQuill)`
    height: 300px;
`;

export default ComBbswrite;
